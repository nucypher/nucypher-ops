- name: "Run Ursula"
  hosts: "{{ play_hosts }}"
  remote_user: "{{default_user}}"
  gather_facts: no
  tasks:

    - name: find keystore file
      find:
        paths: "{{geth_dir}}keystore"
      register: keystore_output

    - name: store signer options
      set_fact:
        signer_options: "--signer keystore://{{nucypher_container_geth_datadir}}/keystore/{{keystore_output.files[0].path | basename}}"

    - name: "remove known nodes"
      become: yes
      file:
        path: /home/nucypher/nucypher/known_nodes/
        state: absent

    - name: "get account address from file"
      become: yes
      command: 'cat {{geth_dir}}account.txt'
      register: active_account

    - name: "ensure known nodes certificates directory"
      become: yes
      file:
        path: /home/nucypher/nucypher/known_nodes/certificates
        state: directory

    - name: "ensure known nodes directory"
      become: yes
      file:
        path: /home/nucypher/nucypher/known_nodes/metadata
        state: directory

    - name: Find my public ip
      uri:
        url: https://api.ipify.org
        return_content: yes
      register: ip_response

    - name: "update Ursula operator config"
      become: yes
      become_user: nucypher
      command: "docker run -v /home/nucypher:/root/.local/share/ \
        -e NUCYPHER_KEYSTORE_PASSWORD -it {{ docker_image | default('nucypher/nucypher:latest') }} \
        nucypher ursula config \
        --domain {{network_name}} \
        --eth-endpoint {{ eth_endpoint }} \
        --polygon-endpoint {{polygon_endpoint}} \
        --rest-host {{ip_response.content}} \
        {{nucypher_ursula_init_options | default('')}} {{signer_options}}"
      environment:
        NUCYPHER_KEYSTORE_PASSWORD: "{{runtime_envvars['NUCYPHER_KEYSTORE_PASSWORD']}}"

    - name: "Backup Worker Nucypher Keystore locally to: {{deployer_config_path}}/remote_operator_backups/"
      become: yes
      become_user: nucypher
      fetch:
        src: "{{keystore_output.files[0].path}}"
        dest: "{{deployer_config_path}}/remote_operator_backups/"

    - name: Stop Ursula
      become: yes
      docker_container:
        name: ursula
        state: stopped
      ignore_errors: yes

    - name: "Run Staked Ursula (seed node)"
      become: yes
      become_user: nucypher
      when: SEED_NODE_URI is not undefined and inventory_hostname == SEED_NODE_URI
      docker_container:
        recreate: yes
        name: ursula
        state: started
        pull: yes
        log_driver: json-file
        log_options:
          max-size: 10m
          max-file: "5"
        image: "{{ docker_image | default('nucypher/nucypher:latest') }}"
        restart_policy: "unless-stopped"
        command: "nucypher ursula run {{CLI_RUNTIME_OPTIONS}} --lonely"
        volumes:
          - /home/nucypher:/root/.local/share/
        ports:
          - "9151:9151"
          - "9101:9101"
        env: "{{runtime_envvars}}"

    - name: "wait a few seconds for the seed node to become available"
      when: SEED_NODE_URI is not undefined and SEED_NODE_URI
      pause:
        seconds: 15

    - name: "Run Staked Ursula (non-seed)"
      become: yes
      become_user: nucypher
      when: inventory_hostname != SEED_NODE_URI
      docker_container:
        recreate: yes
        name: ursula
        state: started
        pull: yes
        log_driver: json-file
        log_options:
          max-size: 10m
          max-file: "5"
        image: "{{ docker_image | default('nucypher/nucypher:latest') }}"
        restart_policy: "unless-stopped"
        command: "nucypher ursula run {{CLI_RUNTIME_OPTIONS}} {{teacher_options}}"
        volumes:
          - /home/nucypher:/root/.local/share/
        ports:
          - "9151:9151"
          - "9101:9101"
        env: "{{runtime_envvars}}"

    - name: "echo operator address"
      debug:
        verbosity: 0
        msg: "{{inventory_hostname}}:operator address:{{ active_account.stdout }}"

    - name: "Get LogPath"
      become: yes
      shell:
        cmd: docker ps --no-trunc | grep ursula | cut -f 1 -d " "
      register: ursula_container_name

    - name: "Read Ursula Log"
      become: yes
      command: docker logs ursula
      register: ursula_logs

    - name: Print Ursula Log Output
      debug:
        msg:
          "{{ursula_logs['stdout']}}"

    - name: "Wait until we see that Ursula has decrypted her keystore and gotten started"
      become: yes
      ignore_errors: yes
      wait_for:
        path: "/var/lib/docker/containers/{{ursula_container_name['stdout']}}/{{ursula_container_name['stdout']}}-json.log"
        search_regex: "Starting services"
        timeout: 30
